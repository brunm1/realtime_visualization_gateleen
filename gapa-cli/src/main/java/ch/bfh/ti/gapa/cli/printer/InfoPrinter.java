package ch.bfh.ti.gapa.cli.printer;

import ch.bfh.ti.gapa.cli.CliOptions;
import ch.bfh.ti.gapa.cli.exception.CommandLineException;
import ch.bfh.ti.gapa.cli.exception.CommandLineExceptionType;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.json.JSONObject;
import org.json.JSONTokener;

import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Properties;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

/**
 * Supplies methods to print out various data about
 * the application.
 */
public class InfoPrinter {
    private static final Logger LOGGER = Logger.getLogger(InfoPrinter.class.getName());

    private Options options;
    private Consumer<String> printer;

    public InfoPrinter(Options options, Consumer<String> printer) {
        this.options = options;
        this.printer = printer;
    }

    /**
     * Creates an instance with default dependencies:
     * System.out
     */
    public InfoPrinter(CliOptions cliOptions) {
        this.options = cliOptions;
        this.printer = System.out::print;
    }

    /**
     * Prints a description of the application, the command line options and the
     * possible exit codes.
     */
    public void printHelp() {
        printer.accept("Visualizes communication between services.\n" +
                "It connects to a communication gateway over websocket,\n" +
                "receives communication data, filters it and outputs PlantUml.\n" +
                "Filters can be configured with a json config file.\n");
        printer.accept("\n");
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.printHelp("java -jar /path/to/gapa.jar <options>", this.options);
        printer.accept("\n");
        printCommandLineExceptionDoc();
    }


    private void printCommandLineExceptionDoc() {
        printer.accept("Possible exit codes:\n");
        printer.accept("0 - Normal termination.\n");
        printer.accept(Arrays.stream(CommandLineExceptionType.values())
                .map(e->e.getCode()+" - "+e.getDesc()).collect(Collectors.joining("\n"))+"\n");
    }

    /**
     * Prints out the version of the application.
     * @throws IOException if version could not be read.
     */
    public void printVersion() throws IOException {
        printer.accept("Gapa - " + readVersion()+"\n");
    }

    private String readVersion() throws IOException {
        try (InputStream inputStream = InfoPrinter.class.getResourceAsStream("/app.properties")) {
            Properties p = new Properties();
            p.load(inputStream);
            return p.getProperty("application.version");
        }
    }

    /**
     * Prints the description of the {@link CommandLineExceptionType} and the
     * message of the cause.
     * @param e An exception generated by the CLI module that wraps the underlying exception.
     */
    public void printCommandLineException(CommandLineException e) {
        LOGGER.log(Level.SEVERE, e.getCommandLineExceptionType().getDesc(), e.getThrowable());
    }

    public void printConfigSchema() throws IOException {
        try (InputStream inputStream = InfoPrinter.class.getResourceAsStream("/config-schema.json")) {
            printer.accept(new JSONObject(new JSONTokener(inputStream)).toString(2)+"\n");
        }
    }
}
