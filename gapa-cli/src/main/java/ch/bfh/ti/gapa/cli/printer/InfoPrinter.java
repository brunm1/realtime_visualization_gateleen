package ch.bfh.ti.gapa.cli.printer;

import ch.bfh.ti.gapa.cli.exception.CommandLineException;
import ch.bfh.ti.gapa.cli.exception.CommandLineExceptionType;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;

import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Properties;
import java.util.stream.Collectors;

/**
 * Supplies methods to print out various data about
 * the application.
 */
public class InfoPrinter {
    private Options options;

    public InfoPrinter(Options options) {
        this.options = options;
    }

    /**
     * Prints a description of the application, the command line options and the
     * possible exit codes.
     */
    public void printHelp() {
        System.out.println("Visualizes communication between services.\n" +
                "It connects to a communication gateway over websocket, " +
                "receives communication data, filters it and outputs PlantUml." +
                "Filters can be configured with a json config file.");
        System.out.println();
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.printHelp("java -jar /path/to/gapa.jar <options>", this.options);
        System.out.println();
        printCommandLineExceptionDoc();
    }


    private static void printCommandLineExceptionDoc() {
        System.out.println("Possible exit codes:");
        System.out.println("0 - normal termination");
        System.out.println(Arrays.stream(CommandLineExceptionType.values())
                .map(e->e.getCode()+" - "+e.getDesc()).collect(Collectors.joining("\n")));
    }

    /**
     * Prints out the version of the application.
     */
    public void printVersion() {
        System.out.println("Gapa - " + readVersion());
    }

    private String readVersion() {
        try (InputStream inputStream = InfoPrinter.class.getResourceAsStream("/app.properties")) {
            Properties p = new Properties();
            p.load(inputStream);
            return p.getProperty("application.version");
        } catch (IOException e) {
            e.printStackTrace();
            return "";
        }
    }

    /**
     * Prints the description of the {@link CommandLineExceptionType} and the
     * message of the cause.
     * @param e An exception generated by the CLI module that wraps the underlying exception.
     */
    public void printCommandLineException(CommandLineException e) {
        System.out.println(e.getCommandLineExceptionType().getDesc() + "\nCause: " + e.getThrowable().getMessage());
    }
}
